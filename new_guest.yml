---
# VIRTUAL HOST LIVECYCLE 
# create vars/domain file with specific vars like disk,ram,cpu...
# ansible-playbook new_guest.xml -l kvm2 -e name=newgestname
# ansible-playbook site.yml -l newgestname -u root
# ansible-playbook users.yml -l newgestname -u root
# ansible-playbook remove_guest.yml -e name=newgestname

- hosts: kvm_servers
  vars:
  - ansible_become: true
  - name: newguestname
  - disk: 5 #GiB
  - ram: 1 #GiB
  - cpu: 1
  - os: debian
  - os_version: buster
  - network: ovs-network
  - ip: dhcp
  #- ip: 192.168.78.90/24
  #- gateway: 192.168.78.1
  #- vlan: 400

  pre_tasks:
  - apt: update_cache=yes
  - apt: pkg=debian-archive-keyring
  - set_fact:
      vg: "{{ vg | d('vg0') }}"
    tags: always
  - include_vars:
      file: "vars/{{ debootstrap_domain | d(domain) | replace('.', '_') }}"
    tags: always
  - stat: path="/mnt/{{ name }}/lost+found"
    register: guest_fs
  - block:
    - setup:
    - lvol: vg={{ vg }} lv={{ name }} size={{ disk }}G
    - command: parted -s "/dev/mapper/{{ vg }}-{{ name }}" -- mklabel msdos mkpart primary 2048s -1s
    - command: kpartx -av "/dev/mapper/{{ vg }}-{{ name }}"
      register: kpartx_a
    - filesystem: dev="/dev/mapper/{{ kpartx_a.stdout_lines[0].split()[2] }}" fstype=ext4 force=yes
    - mount: src="/dev/mapper/{{ kpartx_a.stdout_lines[0].split()[2] }}" name=/mnt/{{ name }} fstype=auto opts=noauto,defaults state=mounted
    when: not guest_fs.stat.exists

  - stat: path="/mnt/{{ name }}/etc"
    register: guest_etc

  roles:
  - role: debootstrap
    debootstrap_path: "/mnt/{{ name }}"
    debootstrap_os: "{{ os }}"
    debootstrap_os_version: "{{ os_version }}"
    debootstrap_hostname: "{{ name }}"
    when: not guest_etc.stat.exists

  tasks:
  - shell: "ls -1 /mnt/{{ name }}/boot/vmlinuz-*"
    register: ls_vmlinuz
  - set_fact:
      guest_kversion: "{{ ls_vmlinuz.stdout_lines[0] | regex_replace('.*vmlinuz-(.*)$', '\\1') }}"
  - template: dest='/mnt/{{ name }}/boot/grub/grub.cfg' src='templates/new_guest_grub.cfg'
  - copy:  dest="/mnt/{{ name }}/boot/grub/device.map" content='(hd0) /dev/mapper/{{ vg }}-{{ name }}\n'
  - command: grub-install --modules=part_msdos.mod --boot-directory="/mnt/{{ name }}/boot" "(hd0)"
  - mount: name=/mnt/{{ name }} state=unmounted
  - command: kpartx -d "/dev/mapper/{{ vg }}-{{ name }}"

  - block:
    - get_argv:
    - name: define new guest
      virt:
        command: define
        xml: "{{ lookup('template', 'templates/new_guest_template.xml') }}"
      ignore_errors: true
      register: define_res
    - name: copy new guest config
      template: dest=/tmp/{{ name }}.xml src=templates/new_guest_template.xml
      when: define_res.failed
    - name: start new guest
      virt:
        name: "{{ name }}"
        state: running
      when: define_res.changed
    tags: define

  - local_action:
      module: ini_file
      path: "{{ inventory_dir }}/inventory"
      section: all_servers
      option: "{{ name }} domain"
      value: "{{ debootstrap_domain | d(domain) }}"
      no_extra_spaces: yes
      state: present
    vars:
      ansible_become: false

  - debug:
      msg:
        - DONE. you may want to run
        - "sudo sed -i  '$ a\\{{ ip.split('/')[0] }} {{ name }}.{{ debootstrap_domain | d(domain) }}' /etc/hosts"

